@using JW

@if (!(pagesDisplayed is null))
{
    <BSPagination Alignment="Alignment.Center">
        <BSPaginationItem IsDisabled="@IsPreviousDisabled">
            <BSPaginationLink Href="#" @onclick="() => GoToPage(currentPage - 1)" PaginationLinkType="PaginationLinkType.PreviousText" />
        </BSPaginationItem>
        @foreach (var i in pagesDisplayed)
        {
            if (i == -1)
            {
                <BSPaginationItem IsDisabled="true">
                    <BSPaginationLink Href="#">...</BSPaginationLink>
                </BSPaginationItem>
            }
            else
            {
                <BSPaginationItem IsActive="i == currentPage">
                    <BSPaginationLink Href="#" @onclick="() => { if (i != currentPage) GoToPage(i); }">@i</BSPaginationLink>
                </BSPaginationItem>
            }
        }
        <BSPaginationItem IsDisabled="@IsNextDisabled">
            <BSPaginationLink Href="#" @onclick="() => GoToPage(currentPage + 1)" PaginationLinkType="PaginationLinkType.NextText" />
        </BSPaginationItem>
    </BSPagination>
}

@code {
    private List<int> pagesDisplayed = new List<int>();
    private int currentPage = 1;
    private int pageSize = 10;

    private bool IsPreviousDisabled
    {
        get
        {
            return currentPage == 1;
        }
    }
    private bool IsNextDisabled
    {
        get
        {
            var pager = new Pager(TotalItems, currentPage, ItemsPerPage, 5);
            return pager.TotalPages == 0 || currentPage == pager.TotalPages;
        }
    }

    [Parameter]
    public int TotalItems { get; set; }

    [Parameter]
    public int StartPage { get; set; } = 1;

    [Parameter]
    public int ItemsPerPage
    {
        get
        {
            return pageSize;
        }
        set
        {
            pageSize = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public EventCallback<int> OnPageChange { get; set; }

    protected override void OnInitialized()
    {
        GoToPage(1);
    }

    public void ChangeItemsPerPage(int itemsPerPage)
    {
        ItemsPerPage = itemsPerPage;
    }

    public void GoToPage(int page)
    {
        OnPageChange.InvokeAsync(page);

        currentPage = page;

        var pager = new Pager(TotalItems, page, ItemsPerPage, 5);
        var pages = pager.Pages;

        pagesDisplayed.Clear();

        if (pager.TotalPages == 0)
        {
            pagesDisplayed.Add(1);
        }
        else
        {
            if (pages.First() > 3)
            {
                pagesDisplayed.Add(1);
                pagesDisplayed.Add(-1);
            }
            else
            {
                for (var i = 1; i < pages.First(); i++)
                {
                    pagesDisplayed.Add(i);
                }
            }

            pagesDisplayed.AddRange(pages);

            if (pages.Last() < pager.TotalPages - 2)
            {
                pagesDisplayed.Add(-1);
                pagesDisplayed.Add(pager.TotalPages);
            }
            else
            {
                for (var i = pages.Last() + 1; i <= pager.TotalPages; i++)
                {
                    pagesDisplayed.Add(i);
                }
            }
        }

        StateHasChanged();
    }
}
